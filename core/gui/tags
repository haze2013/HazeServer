!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIND	haze_signal.h	15;"	d
CC	Makefile	/^CC = gcc$/;"	m
GTKLIB	Makefile	/^GTKLIB = `pkg-config gtk+-2.0 --cflags --libs gthread-2.0`$/;"	m
GTK_REGISTER_SIGNAL_END	haze_signal.h	10;"	d
GTK_REGISTER_SIGNAL_START	haze_signal.h	6;"	d
INIT_LIST_HEAD	haze_list.h	12;"	d
LIST_H	haze_list.h	2;"	d
LIST_HEAD_INIT	haze_list.h	10;"	d
OFFSET	haze_list.h	16;"	d
Objs	Makefile	/^Objs =  main.o haze_framework.o haze_sock.o haze_signal.o haze_event.o haze_ui.o  $/;"	m
TARGET	Makefile	/^TARGET = xface$/;"	m
__HAZE_EVENT__	haze_event.h	2;"	d
__HAZE_SIGNAL__	haze_signal.h	2;"	d
__HAZE_SOCKET__	haze_sock.h	2;"	d
__HAZE_UI__	haze_ui.h	2;"	d
__HAZE_VERIFY__	haze_framework.h	2;"	d
__list_add	haze_list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
btn_no	haze_ui.h	/^	GtkWidget *btn_no;$/;"	m	struct:haze_ui_struct
btn_yes	haze_ui.h	/^	GtkWidget *btn_yes;$/;"	m	struct:haze_ui_struct
container_of	haze_list.h	17;"	d
cycle	haze_framework.h	/^	void (*cycle)(void);$/;"	m	struct:haze_gloabl_struct
enable	haze_ui.h	/^	int enable;$/;"	m	struct:haze_ui_struct
frame	haze_ui.h	/^	GtkWidget *frame;$/;"	m	struct:haze_ui_struct
haze_close_sock	haze_sock.c	/^void haze_close_sock(int sk)$/;"	f
haze_cycle	haze_framework.c	/^void haze_cycle(void)$/;"	f
haze_gloabl_struct	haze_framework.h	/^struct haze_gloabl_struct{$/;"	s
haze_init	haze_framework.c	/^int haze_init(int argc ,char **argv)$/;"	f
haze_init_sock	haze_sock.c	/^int haze_init_sock(char *srvip ,unsigned int srvport)$/;"	f
haze_main_fun	haze_signal.c	/^void haze_main_fun(GtkWidget *widget ,gpointer arg)$/;"	f
haze_signal	haze_framework.c	/^void haze_signal(void)$/;"	f
haze_ui_init	haze_ui.c	/^void haze_ui_init(struct haze_ui_struct *arg)$/;"	f
haze_ui_struct	haze_ui.h	/^struct haze_ui_struct{$/;"	s
haze_verify_ok	haze_signal.c	/^void haze_verify_ok(GtkWidget *widget ,gpointer arg)$/;"	f
haze_work_init	haze_event.c	/^void haze_work_init(struct haze_ui_struct *arg)$/;"	f
hgs	haze_framework.c	/^struct haze_gloabl_struct hgs = {$/;"	v	typeref:struct:haze_gloabl_struct
hus	haze_framework.c	/^struct haze_ui_struct hus;$/;"	v	typeref:struct:haze_ui_struct
init	haze_framework.h	/^	int (*init)(int argc ,char **argv);$/;"	m	struct:haze_gloabl_struct
label	haze_ui.h	/^	GtkWidget *label;$/;"	m	struct:haze_ui_struct
list_add	haze_list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	haze_list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	haze_list.h	/^static inline void list_del(struct list_head *p)$/;"	f
list_empty	haze_list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	haze_list.h	22;"	d
list_for_each	haze_list.h	20;"	d
list_for_each_prev	haze_list.h	21;"	d
list_for_each_safe	haze_list.h	30;"	d
list_head	haze_list.h	/^struct list_head {$/;"	s
list_replace	haze_list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
main	main.c	/^int main(int argc ,char **argv)$/;"	f
next	haze_list.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	haze_list.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
signal	haze_framework.h	/^	void (*signal)(void);$/;"	m	struct:haze_gloabl_struct
window	haze_ui.h	/^	GtkWidget *window;$/;"	m	struct:haze_ui_struct
