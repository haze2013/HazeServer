!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
HazeWorld-objs	Makefile	/^HazeWorld-objs = hookfun.o haze.o common.o haze_path.o haze_socket.o$/;"	m
KERNELBUILD	Makefile	/^KERNELBUILD := \/lib\/modules\/$(shell uname -r)\/build$/;"	m
__COMMON_FILTER__	common.h	2;"	d
__HAZE_HOOKFUN__	hookfun.h	2;"	d
__HAZE_PATH__	haze_path.h	2;"	d
__HAZE_SOCKET__	haze_socket.h	2;"	d
__HAZE__	haze.c	2;"	d	file:
__HOOKFUN_C_	hookfun.c	2;"	d	file:
__MODULE_HAZE__	haze.h	2;"	d
clear_and_return_cr0	common.c	/^unsigned long  clear_and_return_cr0(void)$/;"	f
find_struct_address	common.c	/^void *find_struct_address(char *func_name ,int flag)$/;"	f
find_symbol_addr	common.c	/^unsigned long find_symbol_addr(char *symname)$/;"	f
for_each_line	common.c	14;"	d	file:
haze_close_socket	haze_socket.c	/^void haze_close_socket(struct socket *sock)$/;"	f
haze_exit	haze.c	/^module_exit(haze_exit); $/;"	v
haze_exit	haze.c	/^static void __exit haze_exit(void) {$/;"	f	file:
haze_init	haze.c	/^module_init(haze_init);$/;"	v
haze_init	haze.c	/^static int __init haze_init(void) $/;"	f	file:
haze_init_socket	haze_socket.c	/^struct socket *haze_init_socket(struct socket *sock ,unsigned int remote ,unsigned int port)$/;"	f
haze_lsm_hooks	hookfun.c	/^struct security_operations *haze_lsm_hooks = NULL;$/;"	v	typeref:struct:security_operations
haze_lsm_load	hookfun.c	/^int haze_lsm_load(void)$/;"	f
haze_lsm_unload	hookfun.c	/^void haze_lsm_unload(void)$/;"	f
haze_recv_message	haze_socket.c	/^int haze_recv_message(struct socket *sock ,char *message ,int len)$/;"	f
haze_send_message	haze_socket.c	/^int haze_send_message(struct socket *sock ,char *message ,int len)$/;"	f
haze_sk_alloc	hookfun.c	/^int haze_sk_alloc(struct sock *sk, int family, gfp_t priority)$/;"	f
haze_sk_free	hookfun.c	/^void haze_sk_free(struct sock *sk)$/;"	f
haze_socket_connect	hookfun.c	/^int haze_socket_connect(struct socket *sock,struct sockaddr *address, int addrlen)$/;"	f
haze_task_info	common.h	/^struct haze_task_info {$/;"	s
lsm_alloc_security	hookfun.c	/^static int (*lsm_alloc_security)(struct sock *sk, int family, gfp_t priority);$/;"	v	file:
lsm_free_security	hookfun.c	/^static void (*lsm_free_security)(struct sock *sk);$/;"	v	file:
lsm_socket_connect	hookfun.c	/^int (*lsm_socket_connect) (struct socket *sock,struct sockaddr *address, int addrlen);$/;"	v
obj-m	Makefile	/^obj-m := HazeWorld.o$/;"	m
path	common.h	/^        char path[256];$/;"	m	struct:haze_task_info
remain	common.h	/^	char remain[0];$/;"	m	struct:haze_task_info
replace	common.c	/^char *replace(char *buf, int len, char org, char dest)$/;"	f
sec_file_path	haze_path.c	/^char *sec_file_path(struct file *file, char *buf, int len)$/;"	f
sec_task_path	haze_path.c	/^char *sec_task_path(struct task_struct *task, char *buf, int len)$/;"	f
setback_cr0	common.c	/^void  setback_cr0(unsigned long val)$/;"	f
sys_socket_post_accept	hookfun.c	/^int (*sys_socket_post_accept)(struct socket *,struct socket *, int);$/;"	v
sys_socket_post_connect	hookfun.c	/^int (*sys_socket_post_connect)(struct socket *sock,struct sockaddr *vaddr,int sockaddr_len, int flags);$/;"	v
sys_socket_post_recvmsg	hookfun.c	/^int (*sys_socket_post_recvmsg)(struct kiocb *iocb, struct socket *sock,struct msghdr *, size_t,int);$/;"	v
sys_socket_post_sendmsg	hookfun.c	/^int (*sys_socket_post_sendmsg)(struct kiocb *,struct socket *,struct msghdr *,size_t);$/;"	v
